/*
Быстрая сортировка Хоара
https://habr.com/ru/companies/gnivc/articles/696054/
Данный алгоритм был разработан английским информатиком Тони Хоаром во время работы в МГУ в 1960 году.
Быстрая сортировка относится к алгоритмам из серии «разделяй и властвуй». Использует рекурсию.
*/
package quicksort

import "math"

/*
1. Выбираем элемент из массива и считаем его опорным (в англоязычной литературе его называют pivot).
2. Сортируем элементы в массиве таким образом, чтобы элементы меньше опорного размещались в подмассиве перед ним,
а большие или равные — в подмассиве после.
3. Рекурсивно применяем первые два шага к двум подмассивам слева и справа от опорного элемента.
Т.е. дробим наш массив на подмассивы и сортируем их относительно опорного элемента, пока в этих подмассивах не
останется по одному элементу или меньше. Рекурсия не применяется к массиву, в котором только один элемент или
отсутствуют элементы. Это как раз и будет базовым условием, при котором мы прервем рекурсию.
*/
func Sort(a []int) []int {
	if len(a) <= 1 {
		return a
	}
	// индекс опорного элемента
	pivotIndex := int(math.Floor(float64(len(a) / 2)))
	//Опорный элемент
	pivot := a[pivotIndex]
	// массив с меньшими значениями
	left := make([]int, 0)
	// массив с большими значениями
	right := make([]int, 0)

	for i, value := range a {
		// Пропускаем итерацию, если индекс текущей итерации совпадает
		// с индексом опорного элемента
		if i != pivotIndex {
			if value < pivot {
				left = append(left, value)
			} else {
				right = append(right, value)
			}
		}
	}
	// Рекурсивно вызываем функцию quickSort, передаем туда наши
	// массивы и разворачиваем результат в возвращаемый массив,
	// не забывая вставлять посередине опорный элемент
	result := append(Sort(left), pivot)
	// result = append(result, pivot)
	result = append(result, Sort(right)...)
	return result
}
